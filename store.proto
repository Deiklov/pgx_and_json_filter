syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";


service Store {
  //для sheduler
  //todo разбивка на работу с джобами и тасками/application/user data/tracing data
  //---работа с jobs and tasks
  //сохранит новую полученную задачу
  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {}
  rpc UpdateJob(UpdateJobRequest) returns (google.protobuf.Empty) {}
  rpc GetJobs() returns() {}//repeated будет
  rpc GetJobContent() returns(){}//по id возвращаю отчет

  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {}
  rpc UpdateTask(UpdateTaskRequest) returns (google.protobuf.Empty) {}
  //список всех тасков по джобе с контентом
  rpc GetTasks() returns(stream ) {}

  ///-------
  //applications data
  //шедулер по фильтру выбирает нужные нам заявки, по нашей базе проходит
  rpc GetApplicationIDs(ApplicationFilter) returns (stream TracingInfo) {}
  //по нашей базе делает выборку
  rpc GetApplicationContent(TracingInfoRequest) returns (TracingContent) {}
  ///external data, проксирует запросы в tracing
  rpc GetTracingInfoList(TracingInfoScanRequest) returns (stream TracingInfo) {}
  //заполняется постгря
  rpc DownloadTracingContent(TracingInfoRequest) returns (google.protobuf.Empty) {}

  //для worker

  //загрузим жирное тело реквеста для заявки
  //  rpc GetRequestData(TracingInfoRequest) returns (TracingContent) {}
  //сохраним полученный ответ от MEF
  rpc SaveRequestData(NewDataFromMEF) returns (google.protobuf.Empty) {}
  //сохраним  отчет о тестировании
  rpc SaveReport(JobReport) returns (google.protobuf.Empty) {}
  //вернем отчет о тестировании
  rpc GetReport(JobRequest) returns (JobReport) {}
}

message TracingInfoRequest {
  // Идентификатор вызова бизнес-сервиса
  string current_id = 1;
  // Идентификатор дерева вызовов бизнес-сервисов
  string global_id = 2;
}

message TracingInfoScanRequest {
  // Период, за который необходимо выдать информацию по трейсингу
  // Формат даты: количество милисекунд с начала 1970-01-01T00:00:00Z.
  // Дата начала периода предоставления списка (включительно)
  google.protobuf.Timestamp request_period_begin = 1;
  // Дата окончания периода предоставления списка (исключительно)
  google.protobuf.Timestamp request_period_end = 2;
  // Код бизнес-сервиса согласно справочнику - https://confluence.ca.sbrf.ru/pages/viewpage.action?pageId=3891169477
  // Необязательный параметр
  string bs_code = 3;
}

message JobRequest {
  //id задачи для которой обновляем статус
  string job_id = 1;
}

message UpdateTaskRequest {
  string task_id = 1;
  uint64 status = 2;
  bytes content = 3;
  //todo параметры для апдейта
}

message CreateJobResponse {
  //id созданной задачи
  string job_id = 1;
}

message CreateTaskRequest {
  string job_id = 1;
  //вместо global_id+current_id
  TracingInfo tracing_info = 2;
}

message CreateTaskResponse {
  string task_id = 1;
}

message JobReport {
  //id задачи для которой обновляем статус
  string job_id = 1;
  bytes report_data = 2;
}

message LoadTasksRequest {
  // Дата начала периода (включительно)
  google.protobuf.Timestamp request_period_begin = 1;
  // Дата окончания периода (исключительно)
  google.protobuf.Timestamp request_period_end = 2;
}

message UpdateJobRequest {
  //id задачи для которой обновляем статус
  string job_id = 1;
  //строкове значение статуса,пример: 10%, 0%, error, 100%, stopped
  string progress = 2;
}

message ApplicationFilter {
  //текстовый фильтр на заявки
  string filter = 1;
  uint64 max_rows = 2;
}
//для джобы
message JobSettings {
  //ограничение на общее кол-во заявок
  uint64 max_rows = 1;
  uint64 max_errors = 2;
  //на обстрел MEF
  uint64 limit_rate = 3;
}

message CreateJobRequest {
  //cv_ucl cv_cc или другие
  string bs_code = 1;//todo может не нужен
  //логин того, кто запускает
  string owner = 2;
  //время начала задачи, опционально
  google.protobuf.Timestamp request_begin = 3;
  ApplicationFilter application_filter = 4;
  JobSettings jobs_settings = 5;
  string job_type = 6;//todo enum
}


message TracingContent {
  bytes request_content = 1;
  bytes response_content = 2;
}

message NewDataFromMEF {
  string current_id = 1;
  string global_id = 2;
  //новый ответ, который получили при вызове стратегии в MEF
  bytes response_content = 3;
}

message TracingInfo {
  // Идентификатор вызова бизнес-сервиса
  string current_id = 1;
  // Идентификатор дерева вызовов бизнес-сервисов
  string global_id = 2;
  // Идентификатор родительского вызова бизнес-сервиса
  string parent_id = 3;
  // Код бизнес-сервиса
  string bs_code = 4;
}

